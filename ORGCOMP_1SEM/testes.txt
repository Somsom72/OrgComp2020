ALGUNS CASOS TESTADOS PARA CADA FUNCAO DA CALCULADORA:

MENU:

- in: "0"; out: ERRO, valor digitado fora do escopo
- in: "12"; out: ERRO, valor digitado fora do escopo

SOMA:

- in: "10", "5"; out: "10 + 5 = 15"; em caso de entrada de nois números inteiros, retorna a soma deles.
- in: "10", "-5"; out: "10 + -5 = 10"; caso um deles seja negativo, as regras de sinais são aplicadas.
- in: "-10", "5"; out: "-10 + 5 = -5"; caso um deles seja negativo, as regras de sinais são aplicadas.
- in: "0", "5"; out: "0 + 5 = 5"; o zero também funciona.
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "3", "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.

SUBTRACAO:

- in: "10", "5"; out: "10 - 5 = 5"; em caso de entrada de nois números inteiros, retorna a subtração deles.
- in: "10", "-5"; out: "10 - -5 = 15"; caso um deles seja negativo, as regras de sinais são aplicadas.
- in: "-10", "5"; out: "-10 - 5 = -15"; caso um deles seja negativo, as regras de sinais são aplicadas.
- in: "0", "5"; out: "0 - 5 = -5"; o zero também funciona.
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "3", "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.

MULTIPLICACAO:

- in: "10", "5"; out: "10 * 5 = 50"; em caso de entrada de nois números inteiros, retorna a multiplicação deles.
- in: "10", "-5"; out: "10 * -5 = -50"; caso um deles seja negativo, as regras de sinais são aplicadas.
- in: "-10", "5"; out: "-10 * -5 = 50"; caso um deles seja negativo, as regras de sinais são aplicadas.
- in: "0", "5"; out: "0 * 5 = 0"; o zero também funciona.
- in: "70000"; out: (Volta ao menu com mensagem de erro); retorna erro pois a função foi implementada para processar valores de até 16 bits (16bits=65536).
- in: "0", "-70000"; out: (Volta ao menu com mensagem de erro); o mesmo vale para um valor negativo ou em B ao invés de A.
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "3", "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.

DIVISAO:

- in: "10", "5"; out: "10 / 5 = 2"; em caso de entrada de nois números inteiros, retorna a soma deles.
- in: "10", "-5"; out: "10 / -5 = -2"; caso um deles seja negativo, as regras de sinais são aplicadas.
- in: "-10", "5"; out: "-5 / -10 = 0"; caso o numerador seja menor que o denominador, o resultado é 0
- in: "0", "5"; out: "0 / 5 = 0"; o zero no numerador sempre dá o resultado 0.
- in: "70000"; out: (Volta ao menu com mensagem de erro); retorna erro pois a função foi implementada para processar valores de até 16 bits (16bits=65536).
- in: "0", "-70000"; out: (Volta ao menu com mensagem de erro); o mesmo vale para um valor negativo ou em B ao invés de A.
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "3", "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.

POTENCIA:

- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "3", "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.

RAIZ:
- in: "1"; out: "sqrt(1) = 1"; em caso de entrada positiva inteira c/ raiz perfeita, retorna a raiz.
- in: "0"; out: "sqrt(0) = 0"; demonstrando que o zero se encaixa no caso anterior.
- in: "63"; out: "sqrt(63) = 8"; em caso de entrada positiva inteira s/ raiz perfeita, retorna o teto inteiro da raiz para evitar float (não é arredondamento).
- in: "50"; out: "sqrt(50) = 8"; mostrando que não é um arredondamento
- in: "-1"; out: (Volta ao menu com mensagem de erro); retorna erro pois nao existe raiz de negativos.
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "2147000000"; out: "sqrt(2147000000) = 46336"; funcionamento em caso proximo de limite (maxInt de 4 bytes)


TABUADA:
- in: "1"; out - Tabuada do 1, multiplicando de 0 à 10- (Saída longa)
- in: "0"; out - Tabuada do 1, multiplicando de 0 à 10- (Saída longa)
- in: "429496729"; out (Volta ao menu com mensagem de erro), supera limite da capacidade de armazenamento
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "-2"; out (Volta ao menu com mensagem de erro), número negativo

IMC:
- in: "1.69", "85.5"; out: "IMC = 29.935926613213827"; Calcula corretamente o IMC
- in: "10", "10"; out "IMC = 0.1"
- in: "-5", "-5"; out: (Volta ao menu com mensagem de erro). É feita verificação da validade dos valores. Quando negativos, volta ao menu
com mensagem de erro
- in: "1", "1*10^154"; out: "1*10^308" (Maior valor possível para um double)

FATORIAL:
- in: "1"; out: "1"; em caso de entrada positiva inteira, retorna o fatorial.
- in: "0"; out: "1"; demonstrando que o zero se encaixa no caso anterior.
- in: "5"; out: "120"; demonstrando com numeros com fatoriais "nao triviais".
- in: "-1"; out: (Volta ao menu com mensagem de erro); retorna erro pois nao existe fatorial de negativos.
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "13"; out: "1932053504"; caso limite para valor maximo de int - entradas a partir disso retornam valores sem sentido.

FIBONACCI:
- in: "1"; out: "1 1"; retorna os dois primeiros termos da sequência.
- in: "0"; out: "(Volta ao menu com mensagem de erro)"; o intervalo deve começar do 1.
- in: "10000"; out: "1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765"; demonstrando uma sequencia "nao trivial".
- in: "143"; out: "1 1 2 3 5 8 13 21 34 55 89"; demonstrando que não chega ao 144, por exemplo, se não for maior ou igual a ele.
- in: "3.14"; out: (encerra programa); funcao implementada para processar valores inteiros.
- in: "1134903170"; out: "1 1 ... 1134903170"; O termo limite é 45º número de Fibonacci, após isso dá Runtime Exception.
